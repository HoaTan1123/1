local Player = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")

local MAX_ALLOWED_SPEED = 85
local POSITION_HISTORY_SIZE = 8
local COLLISION_UPDATE_RATE = 0.12

local Character = Player.Character
if not Character then
    for _ = 1, 30 do
        Character = Player.Character
        if Character then break end
        task.wait(0.1)
    end
    if not Character then Character = Player.CharacterAdded:Wait() end
end

local Humanoid, RootPart
for _ = 1, 50 do
    Humanoid = Character:FindFirstChildOfClass("Humanoid")
    RootPart = Character:FindFirstChild("HumanoidRootPart") or Character:FindFirstChild("Torso")
    if Humanoid and RootPart then break end
    task.wait(0.1)
end

Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)

local isFlying = false
local positionHistory = {}
local lastCollisionUpdate = 0

Humanoid.StateChanged:Connect(function(_, newState)
    isFlying = newState == Enum.HumanoidStateType.Flying
    
    
    if isFlying then
        table.clear(positionHistory)
        for _ = 1, POSITION_HISTORY_SIZE do
            table.insert(positionHistory, RootPart.Position)
        end
    end
end)

RunService.Stepped:Connect(function(_, step)
    lastCollisionUpdate = lastCollisionUpdate + step
    if lastCollisionUpdate >= COLLISION_UPDATE_RATE then
        for _, part in pairs(Character:GetDescendants()) do
            if part:IsA("BasePart") then
                
                part.CanCollide = not isFlying
                part.CanTouch = not isFlying
                if isFlying then
                    part.AssemblyLinearVelocity = Vector3.new()
                    part.AssemblyAngularVelocity = Vector3.new()
                end
            end
        end
        lastCollisionUpdate = 0
    end
end)

RunService.Heartbeat:Connect(function()
    
    table.insert(positionHistory, 1, RootPart.Position)
    if #positionHistory > POSITION_HISTORY_SIZE then
        table.remove(positionHistory)
    end

    
    local dynamicThreshold = MAX_ALLOWED_SPEED
    if isFlying then
        dynamicThreshold = dynamicThreshold * 1.3 
    end

    
    local avgSpeed = 0
    for i = 1, #positionHistory - 1 do
        avgSpeed = avgSpeed + (positionHistory[i] - positionHistory[i+1]).Magnitude
    end
    avgSpeed = avgSpeed / (#positionHistory - 1) * 60

    
    if avgSpeed > dynamicThreshold then
        local correctionFactor = math.min(1, (avgSpeed - dynamicThreshold) / 50)
        local targetPos = positionHistory[math.floor(#positionHistory/2)] 
        RootPart.CFrame = RootPart.CFrame:Lerp(CFrame.new(targetPos), correctionFactor)
    end
end)

task.spawn(function()
    
    task.wait(8)
    
    
    for _ = 1, 3 do
        Humanoid.Jump = true
        task.wait(0.5)
    end
end)
