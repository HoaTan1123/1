local Player = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")

local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Character:WaitForChild("HumanoidRootPart")

local isFlying = false
local lastFlyingCheck = 0

RunService.Heartbeat:Connect(function()
    
    lastFlyingCheck = lastFlyingCheck + 1
    if lastFlyingCheck < 6 then return end
    lastFlyingCheck = 0

    
    local nowFlying = Humanoid:GetState() == Enum.HumanoidStateType.Flying
    
    
    if nowFlying ~= isFlying then
        isFlying = nowFlying
        for _, part in pairs(Character:GetDescendants()) do
            if part:IsA("BasePart") then
                
                part.CanCollide = not isFlying
                part.CanTouch = not isFlying
                
                
                if isFlying then
                    part.Velocity = Vector3.new()
                    part.RotVelocity = Vector3.new()
                end
            end
        end
        
        
        RootPart:SetNetworkOwner(isFlying and Player or nil)
    end
    
    
    if isFlying then
        
        local newCFrame = RootPart.CFrame
        RootPart.CFrame = newCFrame
        RootPart.Velocity = Vector3.new(0, 0.01, 0)
        
        
        if math.random() < 0.2 then
            RootPart.CFrame = newCFrame * CFrame.new(
                math.random(-0.05, 0.05),
                math.random(-0.03, 0.03),
                math.random(-0.05, 0.05)
        end
    end
end)

task.spawn(function()
    
    for _, state in pairs(Enum.HumanoidStateType:GetEnumItems()) do
        pcall(function() Humanoid:SetStateEnabled(state, false) end)
    end
    
    
    for _, part in pairs(Character:GetDescendants()) do
        if part:IsA("BasePart") then
            part:SetNetworkOwner(Player)
            task.wait()
        end
    end
    
    
    task.wait(5)
    Humanoid:ChangeState(Enum.HumanoidStateType.Running)
end)
